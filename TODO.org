* TODOs
** NEXT Implement playwright :enhancements:

We could maybe start a chromium instance at the start of the service and then use it for all searches. This way we wouldn't have to way wait for the startup and teardown of it.

** NEXT Forward to default search engine :features:

If there aren't any results for some reason, forward the search to a users default search engine.
Maybe they can select one from their list of bangs.

** NEXT Add models :enhancements:

- [X] Bangs
- [X] Users
- [X] Blocklist
- [ ] Results and their weights
- [ ] providers
  I could probably store the API key next to them?
  #+begin_src python
  google = {
    name: "Google",
    url: "https://google.ch",
    api_key: os.environ['GOOGLE_API_KEY']
  }
  #+end_src

** NEXT Run it as a systemd service :enhancements:

The container is overkill.

** NEXT Can I make the image smaller? :enhancements:

https://jade.fyi/blog/optimizing-nix-docker/

*** DONE Remove bash from the app image :enhancements:
CLOSED: [2025-09-08 Mon 17:49]
:LOGBOOK:
- State "WAITING"    from "NEXT"       [2025-09-03 Wed 16:33]
:END:

I would like to try and remove bash scripts from the app-image.
For this I need to start gunicorn directly from withing Python.
The command would then be ~python ./start-script.py~ or similar.

https://stackoverflow.com/questions/49890551/start-gunicorn-from-python
https://docs.gunicorn.org/en/stable/custom.html

https://stackoverflow.com/questions/46701614/how-to-do-database-migration-using-python-script

** NEXT Implement weights :features:

I want to be able to down-/uprank certain domains.

** NEXT Read ENV files :features:
** NEXT Add pkgs to outputs :enhancements:
:PROPERTIES:
:url:      https://github.com/hercules-ci/flake-parts/discussions/297#discussioncomment-13831807
:END:

** NEXT Check if we can remove unittests.mock from tests :enhancements:

We use pytest which can mock much easier.

* DONE
** DONE Implement an env variable for ~SECRET_KEY~ :bugs:
CLOSED: [2025-10-11 Sat 21:52]
** DONE Fix integration tests :bugs:
CLOSED: [2025-10-11 Sat 20:57]
** DONE Add logging
CLOSED: [2025-10-11 Sat 19:06]

I noticed it is quite hard to debug the application so it would useful to have some logging.
However it should be without revealing any user data.

** DONE Add derviation for the static files :enhancements:
CLOSED: [2025-09-04 Thu 07:38]

This way I could remove the collect static step from the startup scripts.
https://github.com/sephii/django.nix/tree/main

#+begin_src nix
let
  pythonEnv = package.python.withPackages (_: [ package ]);
in stdenv.mkDerivation {
  pname = "${package.pname}-static";
  version = package.version;
  src = ./.;
  buildPhase = ''
    export STATIC_ROOT=$out
    export DJANGO_SETTINGS_MODULE=mysite.config.settings.base
    export MEDIA_ROOT=/dev/null
    export SECRET_KEY=dummy
    export DATABASE_URL=sqlite://:memory:
    ${pythonEnv.interpreter} -m django collectstatic --noinput
  '';
  phases = [ "buildPhase" ];
}
#+end_src

** CANCELLED [#C] Get API keys for searchs :enhancements:
CLOSED: [2025-09-03 Wed 16:34]

- Google
- [X] Bing
  Doesn't have an API
- Yandex
- [X] Duckduckgo
  Doesn't have an API

** DONE Display the URL under the title
CLOSED: [2025-08-18 Mon 15:21]

At the moment I don't know where the link points to.
I would like to see this directly.

** DONE Clean the Duckduckgo links
CLOSED: [2025-07-29 Tue 19:35]

They URLs should point directly to the result site.
At the moment they look like this: ~href="//duckduckgo.com/l/?uddg=https%3A%2F%2Fwiki.nixos.org%2Fwiki%2FPackaging%2FPython&rut=df0696b5e384603bb7999dd83a09a0a74a5aaaa0b09c1bde6092eeea82f4f653"~

** DONE Implement query functionality
CLOSED: [2025-07-20 Sun 20:15]

Just the basic functionality to get queries.

** DONE Make queries parallel
CLOSED: [2025-07-20 Sun 20:14]

For performance it makes probably the most sense then I request the query against all providers at once.
Otherwise I have to wait longer and longer when I add more search engines.

** DONE Setup Flake
CLOSED: [2025-07-20 Sun 20:15]
** DONE Setup Django project
CLOSED: [2025-07-20 Sun 20:15]

I think Django makes the most sense as I would like to add a login feature and I know that Django provides robust support in this area.
Flask would be totally fine if I wouldn't need to store user settings and therefore requiere a login page.
