* Custom Meta search

This is at them moment not production ready!
There are some security related adjustments I have to make before one should use this.

** Idea

Kagi is a good product, but in my opinion, the company behind it has a few issues that make it impossible for me to use.
However, I have identified two main features that I find most useful and that I can replicate in my own project.

1. You can change the order of results by giving certain sites more weight or
   by removing a site altogether.
2. You can add custom bangs.

*** Custom ordering/weights for results

I believe this is a powerful feature, as it personalizes the results and allows you to remove those that are irrelevant to you.
For example, if you know that a website has stopped updating its content but search engines still list it because they are not familiar enough with the site's ecosystem, you should be able to remove it from the results.

*** Bangs

Bangs are, as far as I know, a feature invented by DuckDuckGo.
They allow you to quickly forward a query to a specific site by prefixing the query with a designated string.
For example, =!g foo= will search for =foo= on Google.

This can be very powerful, especially on mobile devices, where it serves as a convenient shortcut.
Having a site that supports this feature makes it particularly convenient, as you donâ€™t have to configure each device to your preferences.

*** Used search engines

- Duckduckgo

**** Planed implementations

- Google
- Bing
- Yandex

** Setup
*** Development Environment

To set up the development environment, you need:

- *Nix* (required) - Used for reproducible development environments
- *direnv* (recommended) - Automatically loads the development environment when entering the project directory

**** Setting up the development environment:

1. Install Nix if you haven't already: https://nixos.org/download.html
2. Install direnv (optional but recommended): https://direnv.net/docs/installation.html
3. Clone the repository and enter the directory:

   #+begin_src shell
   git clone <repository-url>
   cd meta-search
   #+end_src

4. If using direnv, allow the environment:

   #+begin_src shell
   direnv allow
   #+end_src

5. If not using direnv, manually enter the Nix shell:

   #+begin_src shell
   nix develop
   #+end_src

**** Running tests:

Once in the development environment, you can run tests using pytest:

#+begin_src shell
# Run all tests
pytest

# Run specific test file
pytest tests/test_meta_search.py

# Run tests in verbose mode
pytest -v
#+end_src

*** Production Deployment

The easiest way is to get the ~docker-compose.yml~ from this repository and adjust the ~image:~ options to make sure it pulls the pre-built images from GitHub.
Afterwards use ~podman compose up~ to run it.
The site will then be accessible under: [[http://localhost:8000]]

The default admin user is: =admin=
The password is: =password=

*** Configuration

In order to have a production ready system you need to tweak a few configurations.

- ~ZWEILI_SEARCH_DOMAIN~ :: The domain under which you search site should be accessible. E.g. =foo.example.org=
- ~ZWEILI_SEARCH_DB_DIR~ :: The path where you want to store the SQLite DB. By default it is =/var/lib/zweili_search=

** Usage

You can enter a search query right away and it will start searching on all the configured search engines.
At the moment it is only DuckDuckGo.

When you go to [[https://your.domain.com/admin]] you can configure domains you want to block or setup custom bangs.
They are always tied to a specific user so make sure you select the correct one otherwise they will not work or another will get your settings by accident.
For the moment user specific settings aren't planed from my side as I will only allow trusted users on my instance.
