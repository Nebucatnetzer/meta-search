[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "zweili_search"
version = "0.1.0"
requires-python = ">=3.12"
description = "My attempt at a meta search engine."
authors = [
    {name = "Andreas Zweili", email = "andreas@zweili.ch"},
]
license = "GPL-3.0-or-later"
readme = {file = "README.org", content-type = "text/plain"}

[tool.hatch.build.targets.wheel]
packages = [
  "src/search/",
  "src/zweili_search/",
]

[tool.black]
line-length = 88
extend-exclude = '''
/(
  # Directories
  \..*
  | migrations
)/
'''

[tool.isort]
force_single_line = true
line_length = 88
extend_skip_glob = ["*/.*", "*/migrations/*"]

[tool.mypy]
strict = true
exclude = [
    "migrations",
]

[tool.pylint.main]
recursive = true
ignore = ["migrations"]

[tool.pylint."messages control"]
disable = [
    "duplicate-code",  # Django migrations often have similar code
]

[tool.ruff]
exclude = [
  "migrations",
]
src = [
    "src",
    "tests",
]
line-length = 88

[tool.ruff.lint]
fixable = ["ALL"]
select = [ "ALL" ]
ignore = [
    "COM812", # trailing commas, black takes care of this
    "ANN",    # type annotations, mypy takes care of this
    "I001",   # import sorting, isort takes care of this
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "S101",  # Use of assert detected, we use pytest so kind of obvious
]
"tooling/**/*.py" = [
  "INP001",  # Tooling scripts don't need __init__.py
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.docformatter]
wrap-summaries = 88
wrap-descriptions = 88
exclude = ["migrations"]

[tool.coverage.run]
omit = [
    "**/migrations/*",
]
[tool.pytest.ini_options]
addopts = [
    "--cov=src",
    "--strict-markers",
    "--strict-config",
]